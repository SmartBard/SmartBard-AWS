AWSTemplateFormatVersion: 2010-09-09
Description: SmartBard Cognito Cloudformation Template

Parameters: 
  Environment:
    Default: test
    Description: Env Suffix for AWS Cognito
    Type: String

  Domain:
    Default: 'durkin.app'
    Description: Domain name for app
    Type: String

  CognitoID:
    Default: ''
    Description: ClientID for Google OAuth
    Type: String

  CognitoSecret:
    Default: ''
    Description: Secret for Google OAuth
    Type: String

Resources:
  LambdaTrigger:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub smbd-trigger${Environment}
      Runtime: nodejs16.x
      Role:
        Fn::ImportValue: !Sub "LambdaRole${Environment}"
      Handler: index.handler
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          exports.handler = async (event, context) => {
            const { userName, userPoolId } = event;
            const email = event.request.userAttributes.email;
            if (email.endsWith('@obs.org')) {
              return event;
            } else {
              throw new Error('Email is not obs account');
            }
          };
      Description: Lambda trigger to restrict user signups
 
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      DeviceConfiguration:
        DeviceOnlyRememberedOnUserPrompt: true
      UsernameConfiguration: 
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub smbd-user-pool${Environment}
      LambdaConfig:
        PreSignUp: !GetAtt LambdaTrigger.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: 
      - UserPoolIdentityProviderGoogle
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:3000
        - !Sub https://smbd-test.smartbard.${Domain}
        - !Sub https://smbd-prod.smartbard.${Domain}
        - https://smartbard.${Domain}
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
        - Google

  UserPoolIdentityProviderGoogle:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ProviderName: Google
      ProviderType: Google
      ProviderDetails:
        client_id: !Ref CognitoID
        client_secret: !Ref CognitoSecret
        authorize_scopes: "email profile openid"
      AttributeMapping:
        email: email
        given_name: given_name
        family_name: family_name
        username: sub

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub smbd${Environment}
      UserPoolId: !Ref UserPool

  UserPoolGroupAdmins:
    Type: AWS::Cognito::UserPoolGroup
    Properties: 
      Description: Group of users with Admin permissions
      GroupName: Admins
      RoleArn:
        Fn::ImportValue:
          !Sub "AdminRoleArn${Environment}"
      UserPoolId: !Ref UserPool

  UserPoolGroupStudents:
    Type: AWS::Cognito::UserPoolGroup
    Properties: 
      Description: Group of users with student permissions
      GroupName: Students
      RoleArn:
        Fn::ImportValue:
          !Sub "StudentRoleArn${Environment}"
      UserPoolId: !Ref UserPool

  UserPoolIdSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: Cognito User pool ID for SMBD
      SecretString: !Ref UserPool
      Name: !Sub "cognito-pool${Environment}"

  ClientIdSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: Cognito Client ID for SMBD
      SecretString: !Ref UserPoolClient
      Name: !Sub "cognito-client${Environment}"
