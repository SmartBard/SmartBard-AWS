AWSTemplateFormatVersion: 2010-09-09
Description: SmartBard EC2 Cloudformation Template

Parameters: 
  Environment:
    Default: test
    Description: Env Suffix for SMBD EC2 Server
    Type: String

  Certificate:
    Default: 'arn'
    Description: ARN of existing ACM certificate
    Type: String

Resources:
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "VPC${Environment}"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: all
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub smbd-lb-sg${Environment}
 
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instances
      VpcId: 
        Fn::ImportValue:
            !Sub "VPC${Environment}"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref LBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: all
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub smbd-ec2-sg${Environment}

  LBSGIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref LBSecurityGroup
      IpProtocol: tcp
      FromPort: 3000
      ToPort: 3000
      SourceSecurityGroupId: !Ref EC2SecurityGroup

  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-007855ac798b5175e
        InstanceType: t3.small
        KeyName: !Sub smbd-keypair${Environment}
        IamInstanceProfile:
          Arn:
            Fn::ImportValue: !Sub "EC2RoleArn${Environment}"
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub smbd-ec2${Environment}
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              sudo apt-get update -y;
              sudo apt-get upgrade -y;
              sudo apt-get install awscli -y;
              sudo apt-get install jq -y;
              curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -;
              sudo apt-get install -y nodejs;
              sudo mkdir /opt/smbd;
              cd /opt/smbd;
              sudo git clone https://github.com/SmartBard/SmartBard-API;
              cd /opt/smbd/SmartBard-API;
              sudo mkdir /opt/smbd/SmartBard-API/uploaded-assets;
              sudo mkdir /opt/smbd/SmartBard-API/uploaded-assets/media;
              cp /opt/smbd/SmartBard-API/deploy/smbd.service /etc/systemd/system/smbd.service;
              sudo npm install;
              sudo touch .env;
              sudo echo POSTGRES_HOST=$(aws secretsmanager get-secret-value --secret-id db-hostname${Environment} --region us-east-1 | jq -r .SecretString) >> .env;
              sudo echo POSTGRES_USER=$(aws secretsmanager get-secret-value --secret-id db-username${Environment} --region us-east-1 | jq -r .SecretString) >> .env;
              sudo echo POSTGRES_DATABASE=postgres >> .env;
              sudo echo POSTGRES_PASSWORD=$(aws secretsmanager get-secret-value --secret-id db-password${Environment} --region us-east-1 | jq -r .SecretString) >> .env;
              sudo echo CLOUDWATCH_GROUP_NAME=smartbard-application >> .env;
              sudo echo AWS_ACCESS_KEY_ID=$(aws secretsmanager get-secret-value --secret-id smbd-access-key${Environment} --region us-east-1 | jq -r .SecretString) >> .env;
              sudo echo AWS_SECRET_ACCESS_KEY=$(aws secretsmanager get-secret-value --secret-id smbd-secret-key${Environment} --region us-east-1 | jq -r .SecretString) >> .env;
              sudo echo AWS_REGION=us-east-1 >> .env;
              sudo echo NODE_PORT=3000 >> .env;
              sudo echo NODE_ENV=${Environment} >> .env;
              sudo echo COGNITO_USER_POOL=$(aws secretsmanager get-secret-value --secret-id cognito-pool${Environment} --region us-east-1 | jq -r .SecretString) >> .env;
              sudo echo COGNITO_CLIENTID=$(aws secretsmanager get-secret-value --secret-id cognito-client${Environment} --region us-east-1 | jq -r .SecretString) >> .env;
              sudo echo S3_IMAGE_ACCESS_POINT=arn:aws:s3:us-east-1:013130384093:accesspoint/smbd-images-ap${Environment} >> .env;
              sudo echo S3_IMAGE_BASE_URL=https://smbd-images${Environment}.smartbard.durkin.app >> .env;
              sudo systemctl enable smbd.service;
              sudo systemctl start smbd.service;
      LaunchTemplateName: smbd-template

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: !Sub smbd-load-balancer${Environment}
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref LBSecurityGroup
      Subnets: 
        - Fn::ImportValue:
            !Sub "SubnetA${Environment}"
        - Fn::ImportValue:
            !Sub "SubnetB${Environment}"
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub smbd-target-group${Environment}
      Protocol: HTTP
      Port: 3000
      VpcId:
        Fn::ImportValue:
            !Sub "VPC${Environment}"
      TargetType: instance
      Matcher:
        HttpCode: 401

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
      Certificates:
        - CertificateArn: !Ref Certificate

  EC2AutoScaler:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub smbd-scaler${Environment}
      DefaultInstanceWarmup: 300
      DesiredCapacity: 1
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref TargetGroup
      MinSize: 1
      MaxSize: 1
      MaxInstanceLifetime: 86400
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "SubnetA${Environment}"
