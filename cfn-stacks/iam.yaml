AWSTemplateFormatVersion: 2010-09-09
Description: SmartBard IAM Role Cloudformation Template

Parameters: 
  Environment:
    Default: test
    Description: Env Suffix for SMBD IAM Role
    Type: String
Resources:
  EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
      RoleName: !Sub smbd-ec2-iam-role${Environment}
 
  EC2IAMRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2IAMRole

  SmartBardUser:
    Type: AWS::IAM::User
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonVPCFullAccess
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/CloudFrontFullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite

  SmartBardUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref SmartBardUser

  IAMRoleAdmin:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - rds.amazonaws.com
                - s3.amazonaws.com
            Action:
              - 'sts:AssumeRole'

      Policies:
        - 
         PolicyName: "root"
         PolicyDocument:
           Version: "2012-10-17"
           Statement:
              - 
                Effect: "Allow"
                Action: "*"
                Resource: "*"

  IAMRoleStudent:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - rds.amazonaws.com
                - s3.amazonaws.com
            Action:
              - 'sts:AssumeRole'

      Policies:
        - 
         PolicyName: "root"
         PolicyDocument:
           Version: "2012-10-17"
           Statement:
              - 
                Effect: "Allow"
                Action: "*"
                Resource: "*"

  AccessKeySecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: Access Key for API
      SecretString: !Ref SmartBardUserAccessKey
      Name: !Sub "smbd-access-key${Environment}"
  
  SecretKeySecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: Secret Key for API
      SecretString: !GetAtt [SmartBardUserAccessKey, SecretAccessKey]
      Name: !Sub "smbd-secret-key${Environment}"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub smbd-lambda-policy${Environment}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "logs:CreateLogGroup"
                Resource: "arn:aws:logs:us-east-1:013130384093:*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:aws:logs:us-east-1:013130384093:log-group:/aws/lambda/smbd-trigger${Environment}"
      RoleName: !Sub smbd-lambda-role${Environment}

Outputs:
  AdminRoleArn:
    Description: Role Arn of Admin Role
    Value: !GetAtt IAMRoleAdmin.Arn
    Export:
      Name: !Sub AdminRoleArn${Environment}
  
  StudentRoleArn:
    Description: Role Arn of Student Role
    Value: !GetAtt IAMRoleStudent.Arn
    Export:
      Name: !Sub StudentRoleArn${Environment}

  AccessKey:
    Value: !Ref SmartBardUserAccessKey
    Description: AWSAccessKeyId of SmartBard User

  SecretKey:
    Value: !GetAtt [SmartBardUserAccessKey, SecretAccessKey]
    Description: AWSSecretAccessKey of  SmartBard User

  EC2RoleArnTest:
    Value: !GetAtt EC2IAMRoleProfile.Arn
    Description: Temp value for changing
    Export:
      Name: !Sub "EC2RoleArn${Environment}"

  LambdaRole:
    Value: !Ref LambdaExecutionRole
    Description: ARN of role for lambda function
    Export:
      Name: !Sub "LambdaRole${Environment}"
